//within {{project_name}}.Loads.{{model_name}};
model BuildingSpawnZ1
  "FMU Template for Spawn"
 extends Buildings.Applications.DHC.Loads.BaseClasses.PartialBuilding(
     redeclare package Medium = Medium1,
     have_pum=false,
     have_eleHea=false,
     have_eleCoo=false,
     have_heaLoa=false,
     have_cooLoa=false,
     have_fan= false,
     have_weaBus=true);

 replaceable package Medium1 = Buildings.Media.Water
   "Source side medium";
 replaceable package Medium2 = Buildings.Media.Air
   "Load side medium";

  parameter Integer nZon = 1
   "Number of thermal zones"
  parameter String idfPat=
    "modelica://{{project_name}}/Loads/{{data['load_resources_path']}}/{{data['idf']['filename']}}"
    "Path of the IDF file";
  parameter String weaPat=
    "modelica://{{project_name}}/Loads/{{data['load_resources_path']}}/{{data['epw']['filename']}}"
    "Path of the weather file";
  parameter String fmuPat=
    "modelica://Buildings/Resources/src/ThermalZones/EnergyPlus/FMUs/Zones1.fmu"
    "Path of the fmu file";

{% for zone in data['thermal_zones'] %}
  Buildings.ThermalZones.EnergyPlus.ThermalZone {{zone['modelica_object_name']}}(
    redeclare package Medium = Medium2,
    zoneName="{{zone['spawn_object_name']}}") "Thermal zone"
    {% raw %} annotation (Placement(transformation(extent={{40,-20},{80,20}}))); {% endraw %}
{% endfor %}

  inner Buildings.ThermalZones.EnergyPlus.Building building(
       idfName=Modelica.Utilities.Files.loadResource(idfPat),
       weaName=Modelica.Utilities.Files.loadResource(weaPat),
       fmuName=Modelica.Utilities.Files.loadResource(fmuPat),
       showWeatherData=false)
       "Building model"
     annotation (Placement(transformation(extent={{40,60},{60,80}})));

  {% raw %}Modelica.Blocks.Sources.Constant qConGai_flow(k=0)"Convective heat gain"
    annotation (Placement(transformation(extent={{-80,60},{-60,80}})));
  Modelica.Blocks.Sources.Constant qRadGai_flow(k=0) "Radiative heat gain"
    annotation (Placement(transformation(extent={{-80,100},{-60,120}})));
  Modelica.Blocks.Sources.Constant qLatGai_flow(k=0) "Latent heat gain"
    annotation (Placement(transformation(extent={{-80,20},{-60,40}})));
  Modelica.Blocks.Routing.Multiplex3 multiplex3_1
    annotation (Placement(transformation(extent={{-20,60},{0,80}})));{% endraw %}
// floating air system
  Buildings.Fluid.FixedResistances.PressureDrop duc(
    redeclare package Medium = Medium2,
    allowFlowReversal=false,
    linearized=true,
    from_dp=true,
    dp_nominal=100,
    m_flow_nominal=47*6/3600*1.2)
    "Duct resistance (to decouple room and outside pressure)"
    annotation (Placement(transformation(extent={{20,-40},{0,-20}})));
  Buildings.Fluid.Sources.MassFlowSource_T bou(
    redeclare package Medium = Medium2,
    m_flow=0,
    T=293.15,
    nPorts=1)
    "Boundary condition"
    annotation (Placement(transformation(extent={{-40,-80},{-20,-60}})));
  Buildings.Fluid.Sources.Boundary_pT freshAir(
    redeclare package Medium = Medium2,
    nPorts=1)
    "Boundary condition"
    annotation (Placement(transformation(extent={{-40,-40},{-20,-20}})));

equation
  connect(qRadGai_flow.y,multiplex3_1. u1[1])  annotation (Line(
      points={{-59,110},{-40,110},{-40,77},{-36,77}},
      color={0,0,127},
      smooth=Smooth.None));
  connect(qConGai_flow.y,multiplex3_1. u2[1]) annotation (Line(
      points={{-59,70},{-22,70},{-42,70},{-36,70}},
      color={0,0,127},
      smooth=Smooth.None));
  connect(multiplex3_1.u3[1],qLatGai_flow. y) annotation (Line(
      points={{-59,30},{-40,30},{-40,63},{-22,63}},
      color={0,0,127}));{% endraw %}
  connect(freshAir.ports[1], duc.port_b) annotation (Line(
      points={{-20,-30},{0,-30}},
       color={0,127,255}));

  {% for zone in data['thermal_zones'] %}
  connect(multiplex3_1.y, {{zone['modelica_object_name']}}.qGai_flow) annotation (Line(
        points={{1,70},{16,70},{16,10},{38,10}},
        color={0,0,127}));
  connect(duc.port_a, {{zone['modelica_object_name']}}.ports[1]) annotation (Line(
        points={{20,-30},{58,-30},{58,-19.2}},
        color={0,127,255}));
  connect(bou.ports[1], {{zone['modelica_object_name']}}.ports[2]) annotation (Line(
        points={{-20,-70},{62,-70},{62,-19.2}},
        color={0,127,255})); {% endraw %}
  {% endfor %}

  // TODO: determine how to handle the "lines"
{% raw %}
annotation (
        Diagram(
          coordinateSystem(extent={{-300,-300},{300,300}})),
        Icon(
          coordinateSystem(extent={{-100,-100},{100,100}}),
          graphics={Bitmap(extent={{-108,-98},{92,102}},fileName="modelica://Buildings/Resources/Images/ThermalZones/EnergyPlus/EnergyPlusLogo.png")}),
          __Dymola_Commands(file="modelica://Buildings/Resources/Scripts/Dymola/ThermalZones/EnergyPlus/GeoJsonTranslatorTemplates/BuildingSpawnZ1.mos"
             "Simulate and plot"),
     experiment(
       StartTime=0,
       StopTime=432000,
       Tolerance=1e-06,
        __Dymola_Algorithm="Cvode"),
Documentation(info="
 <html>
<p>
Template to connect n-thermal zones using GeoJSON to Modelica Translator.
The thermal zone air temperature is floating.
</p>
</html>", revisions="<html>
<ul><li>
March 24, 2019: Nicholas Long<br/>
First implementation.
</li>
</ul>
</html>")); {% endraw %}
end BuildingSpawnZ1;
